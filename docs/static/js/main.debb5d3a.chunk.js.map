{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","squares","renderSquare","i","Game","useState","Array","fill","history","setHistory","stepNumber","setStepNumber","xIsNext","setxIsNext","localhistory","current","winner","calculateWinner","moves","map","step","move","desc","jumpTo","status","slice","length","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"0LAKMA,EAAS,SAACC,GACV,OACE,wBAAQC,UAAU,SACdC,QAAS,kBAAIF,EAAME,WADvB,SAGGF,EAAMG,SAMXC,EAAQ,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,QAAQH,EAAY,EAAZA,QACjBI,EAAa,SAACC,GACjB,OACE,cAACR,EAAD,CACEI,MAAOE,EAAQE,GACfL,QAAS,kBAAKA,EAAQK,OAI1B,OACE,gCACE,sBAAKN,UAAU,YAAf,UACGK,EAAa,GACbA,EAAa,GACbA,EAAa,MAEhB,sBAAKL,UAAU,YAAf,UACGK,EAAa,GACbA,EAAa,GACbA,EAAa,MAEhB,sBAAKL,UAAU,YAAf,UACGK,EAAa,GACbA,EAAa,GACbA,EAAa,UAOlBE,EAAO,SAACR,GAEb,MAA+BS,mBAAS,CAAC,CAACJ,QAASK,MAAM,GAAGC,KAAK,SAAjE,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAoCJ,mBAAS,GAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KACA,EAA8BN,oBAAS,GAAvC,mBAAOO,EAAP,KAAgBC,EAAhB,KAuBSC,EAAeN,EACfO,EAAUD,EAAaJ,GACvBM,EAASC,EAAgBF,EAAQd,SAEjCiB,EAAQJ,EAAaK,KAAI,SAACC,EAAMC,GACpC,IAAMC,EAAOD,EACX,eAAiBA,EACjB,mBACF,OACE,6BACE,wBAAQvB,QAAS,kBAhBV,SAACsB,GACdT,EAAcS,GACdP,EAAYO,EAAO,IAAO,GAcGG,CAAOF,IAA9B,SAAsCC,KAD/BD,MAMTG,EAAO,GAOX,OALEA,EADER,EACO,WAAaA,EAEb,iBAAmBJ,EAAU,IAAM,KAI5C,sBAAKf,UAAU,OAAf,UACE,qBAAKA,UAAU,aAAf,SACE,cAACG,EAAD,CACEC,QAASc,EAAQd,QACjBH,QAhDS,SAACK,GAClB,IAAMW,EAAeN,EAAQiB,MAAM,EAAGf,EAAa,GAE7CT,EADUa,EAAaA,EAAaY,OAAS,GAC3BzB,QAAQwB,QAE5BR,EAAgBhB,IAAYA,EAAQE,KAIxCF,EAAQE,GAAKS,EAAU,IAAM,IAC7BH,EAAW,GAAD,mBAAMK,GAAN,CAAmB,CAACb,cAC9BU,EAAcG,EAAaY,QAC3Bb,GAAYD,SAuCR,sBAAKf,UAAU,YAAf,UACE,8BAAM2B,IACN,6BAAKN,WAWf,SAASD,EAAgBhB,GAWvB,IAVA,IAAM0B,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAxB,EAAI,EAAGA,EAAIwB,EAAMD,OAAQvB,IAAK,CACrC,kBAAkBwB,EAAMxB,GAAxB,GAAOyB,EAAP,KAAUC,EAAV,KAAaC,EAAb,KACA,GAAI7B,EAAQ2B,IAAM3B,EAAQ2B,KAAO3B,EAAQ4B,IAAM5B,EAAQ2B,KAAO3B,EAAQ6B,GACpE,OAAO7B,EAAQ2B,GAGnB,OAAO,KAnBTG,IAASC,OAAO,cAAC5B,EAAD,IAAU6B,SAASC,eAAe,W","file":"static/js/main.debb5d3a.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n// import App from './App';\r\n\r\nconst Square = (props) =>{\r\n      return (\r\n        <button className=\"square\"\r\n            onClick={()=>props.onClick()}\r\n>\r\n          {props.value}\r\n        </button>\r\n      );\r\n    \r\n  }\r\n\r\nconst Board = ({squares,onClick})=> {\r\n const renderSquare=(i)=> {\r\n    return (\r\n      <Square\r\n        value={squares[i]}\r\n        onClick={() =>onClick(i)}\r\n      />\r\n    );\r\n  }\r\n    return (\r\n      <div>\r\n        <div className=\"board-row\">\r\n          {renderSquare(0)}\r\n          {renderSquare(1)}\r\n          {renderSquare(2)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {renderSquare(3)}\r\n          {renderSquare(4)}\r\n          {renderSquare(5)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {renderSquare(6)}\r\n          {renderSquare(7)}\r\n          {renderSquare(8)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\nconst Game = (props) => {\r\n\r\n const [history, setHistory ] = useState([{squares: Array(9).fill(null)}]);\r\n const [stepNumber, setStepNumber] = useState(0);\r\n const [xIsNext, setxIsNext] = useState(true);\r\n\r\n const handleClick = (i) => {\r\n    const localhistory = history.slice(0, stepNumber + 1);\r\n    const current = localhistory[localhistory.length - 1];\r\n    const squares = current.squares.slice();\r\n\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n\r\n    squares[i] = xIsNext ? \"X\" : \"O\";\r\n    setHistory([ ...localhistory,{squares}]);\r\n    setStepNumber(localhistory.length);\r\n    setxIsNext(!xIsNext);\r\n    }\r\n\r\n    const jumpTo=(step)=> {\r\n    setStepNumber(step);\r\n    setxIsNext((step % 2) === 0);\r\n    } \r\n\r\n  \r\n    const localhistory = history;\r\n    const current = localhistory[stepNumber];\r\n    const winner = calculateWinner(current.squares);\r\n\r\n    const moves = localhistory.map((step, move) => {\r\n      const desc = move ?\r\n        'Go to move #' + move :\r\n        'Go to game start';\r\n      return (\r\n        <li key={move}>\r\n          <button onClick={() => jumpTo(move)}>{desc}</button>\r\n        </li>\r\n      );\r\n    })\r\n\r\n    let status='';\r\n    if (winner) {\r\n      status = \"Winner: \" + winner;\r\n    } else {\r\n      status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\r\n    }\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board\r\n            squares={current.squares}\r\n            onClick={handleClick}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{status}</div>\r\n          <ol>{moves}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n// ========================================\r\n\r\nReactDOM.render(<Game />, document.getElementById(\"root\"));\r\n\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n"],"sourceRoot":""}